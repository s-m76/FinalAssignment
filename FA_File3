# File 3: GUI

import os
import tkinter as tk
from tkinter import messagebox
from FA_File2 import FileHandler

class GUI:
    users = {
        'admin': 'admin',
        'cust1': 'pass1',
        'cust2': 'pass2'
    }

    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Login Interface")
        self.current_user = None  # Tracks the logged-in user
        self.create_login_interface()

    def create_login_interface(self):
        self.clear_screen()
        tk.Label(self.root, text="Login as:").pack()
        tk.Button(self.root, text="Admin", command=self.admin_login_window).pack()
        tk.Button(self.root, text="Customer", command=self.customer_login_window).pack()

    def admin_login_window(self):
        self.clear_screen()
        tk.Label(self.root, text="Admin Login").pack()
        tk.Label(self.root, text="Username:").pack()
        username_entry = tk.Entry(self.root)
        username_entry.pack()
        tk.Label(self.root, text="Password:").pack()
        password_entry = tk.Entry(self.root, show='*')
        password_entry.pack()

        def validate_admin_login():
            username = username_entry.get()
            password = password_entry.get()
            if username == 'admin' and password == 'admin':
                self.admin_panel_window()
            else:
                messagebox.showerror("Error", "Invalid admin credentials.")

        tk.Button(self.root, text="Login", command=validate_admin_login).pack()
        tk.Button(self.root, text="Back", command=self.create_login_interface).pack()

    def customer_login_window(self):
        self.clear_screen()
        tk.Label(self.root, text="Customer Login").pack()
        tk.Label(self.root, text="Username:").pack()
        username_entry = tk.Entry(self.root)
        username_entry.pack()
        tk.Label(self.root, text="Password:").pack()
        password_entry = tk.Entry(self.root, show='*')
        password_entry.pack()

        def validate_customer_login():
            username = username_entry.get()
            password = password_entry.get()
            if username in self.users and self.users.get(username) == password:
                self.current_user = username
                self.customer_panel_window()
            else:
                messagebox.showerror("Error", "Invalid customer credentials.")

        tk.Button(self.root, text="Login", command=validate_customer_login).pack()
        tk.Button(self.root, text="Back", command=self.create_login_interface).pack()

    def admin_panel_window(self):
        self.clear_screen()
        tk.Label(self.root, text="Admin Panel").pack()
        tk.Button(self.root, text="Create Customer Account", command=self.create_customer_account).pack()
        tk.Button(self.root, text="Modify Customer Account", command=self.modify_customer_account).pack()
        tk.Button(self.root, text="Delete Customer Account", command=self.delete_customer_account).pack()
        tk.Button(self.root, text="Back", command=self.create_login_interface).pack()

    def customer_panel_window(self):
        self.clear_screen()
        tk.Label(self.root, text="Customer Panel").pack()
        tk.Button(self.root, text="View Purchases", command=self.view_purchases).pack()
        tk.Button(self.root, text="Purchase Tickets", command=self.purchase_tickets).pack()
        tk.Button(self.root, text="Back", command=self.create_login_interface).pack()

    def create_customer_account(self):
        messagebox.showinfo("Info", "Customer account creation coming soon :)")

    def modify_customer_account(self):
        messagebox.showinfo("Info", "Customer account modification coming soon :)")

    def delete_customer_account(self):
        messagebox.showinfo("Info", "Customer account deletion coming soon :)")

    def view_purchases(self):
        self.clear_screen()
        file_handler = FileHandler("purchases.pkl")  # Create an instance of FileHandler
        purchases = file_handler.read_file() or {}  # Use the instance method
        username = self.current_user  # Get the logged-in user's username

        if username in purchases and purchases[username]:
            tk.Label(self.root, text="Your Purchases").pack()
            purchase_listbox = tk.Listbox(self.root, width=50, height=10)
            purchase_listbox.pack()
            for item in purchases[username]:
                purchase_listbox.insert(tk.END, item)

            def remove_purchase():
                selected = purchase_listbox.curselection()
                if selected:
                    item = purchase_listbox.get(selected)
                    purchases[username].remove(item)

                    file_handler.update_file(purchases)  # Use the instance method

                    purchase_listbox.delete(selected)
                    messagebox.showinfo("Info", f"Removed: {item}")
                else:
                    messagebox.showerror("Error", "No item selected.")

            tk.Button(self.root, text="Remove Selected", command=remove_purchase).pack()
        else:
            messagebox.showinfo("Purchases", "No purchases found.")
        tk.Button(self.root, text="Back", command=self.customer_panel_window).pack()

    def purchase_tickets(self):
        self.clear_screen()
        tk.Label(self.root, text="Available Tickets").pack()

        tickets = [
            {
                "name": "Single Day Pass",
                "price": 275,
                "description": "Access for one day",
                "validity": "1 day",
                "discount": "None",
                "limitations": "Valid only on selected date"
            },
            {
                "name": "Two Day Pass",
                "price": 480,
                "description": "Access for two consecutive day",
                "validity": "2 days",
                "discount": "10% online",
                "limitations": "Cannot be split over multiple trips"
            },
            {
                "name": "Annual Membership",
                "price": 1840,
                "description": "Unlimited access for one year",
                "validity": "1 year",
                "discount": "15% renewal discount",
                "limitations": "Must be used by same person"
            },
            {
                "name": "Child Ticket",
                "price": 185,
                "description": "Discount for children ages 3-12",
                "validity": "1 day",
                "discount": "None",
                "limitations": "Must be accompanied by an adult"
            },
            {
                "name": "Group Ticket(10+)",
                "price": 220,
                "description": "Special Rate for groups of 10 or more",
                "validity": "1 day",
                "discount": "20% of for groups of 20 and more",
                "limitations": "Must be booked in advance"
            },
            {
                "name": "VIP Experience",
                "price": 550,
                "description": "Premium access and reserved seats",
                "validity": "1 day",
                "discount": "None",
                "limitations": "Must be purchased in advance"
            },
        ]
        selected_ticket = tk.StringVar(value=tickets[0]["name"])

        for ticket in tickets:
            tk.Radiobutton(self.root, text=f"{ticket['name']} - ${ticket['price']}\n{ticket['description']}", variable=selected_ticket, value=ticket["name"]).pack()

        def confirm_purchase():
            ticket_name = selected_ticket.get()
            ticket = next(t for t in tickets if t["name"] == ticket_name)

            file_handler = FileHandler("purchases.pkl")  # Create an instance of FileHandler
            purchases = file_handler.read_file() or {}  # Use the instance to call read_file
            username = self.current_user  # Use the logged-in user's username

            if username not in purchases:
                purchases[username] = []

            purchases[username].append(f"{ticket['name']} - ${ticket['price']}")

            if not os.path.exists("purchases.pkl"):
                file_handler.create_file(purchases)  # Use the instance to create the file
            else:
                file_handler.update_file(purchases)  # Use the instance to update the file

            messagebox.showinfo("Success", f"You have purchased: {ticket['name']} for ${ticket['price']}")
            self.customer_panel_window()

        tk.Button(self.root, text="Confirm Purchase", command=confirm_purchase).pack()
        tk.Button(self.root, text="Back", command=self.customer_panel_window).pack()

    def clear_screen(self):
        for widget in self.root.winfo_children():
            widget.destroy()

    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    gui = GUI()
    gui.run()
